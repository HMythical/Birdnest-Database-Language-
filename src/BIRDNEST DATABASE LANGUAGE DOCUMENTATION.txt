BIRDNEST DATABASE LANGUAGE

Authored and Coded by: HMythical

Current Version: 1.0


This SQL Clone was created by HMythical for the purposes of making databases with SQL better. 
The objective was to create a simple, and easy-to-learn language that has powerful features to support usage
outside of the open-source market. This project is 100% open-source. Any user may utilize this documentation
to create their own versions of BDL, with the constraint that, all users who choose to do this must credit the
original author of the documentation. The source code is also open source.
Any user may use the source code as they wish, however...
YOU MUST CREDIT THE ORIGINAL AUTHOR FOR ANY USAGE OF BDL. Whether it be for your open-source project,
or if you are a corporate entity, who decided to give this software a chance.


This SQL Clone is in honor of my APCSA Teacher, Richard Crow, who inspired me to create a language that encapsulated
birds as the main focus of all the commands, keywords, and definition, without him, I wouldn't have even attempted 
to make this project work. To him, thank you for all that you've done to inspire me to continue my career in CS


Signed,
	HMythical


FOR USERS WHO DONT GET THE PUNS:

EGGS =  COLUMNS
NESTS = TABLES
CHICKS = USERS
ROOSTER = TEMP-ADMIN
CROW = ADMIN

any paramters that have egg or nest in the name, please refer to this to not be as confused.



SECTION I: COMMANDS

------------------------------------------------------------------------------------------------------------QUERYING DATA------------------------------------------------------------------------------------------------------------
1. PICK EGG [SPECIFIC] egg1,egg2,... (SELECT)
	FROM nest_name
	[FIND condition]
	[NEST WITH nest_name]
	[HAS condition]
	[SORT BY nest_name [ASCO|DESCO]]
	[LIMIT BY offset, count];
	
	// SELECTS AND DISPLAYS GIVEN VALUES FROM A NEST (table). CAN LIMIT AND SUPPORT CONDITIONALS AND SORT FROM ASCENDING/DESCENDING ORDER (ASCO|DESCO)
	// THROWS EGGNOTFOUNDEXCEPTION IF EGG IS NOT WITHIN THE NEST YOU ARE CURENTLY SEARCHING THROUGH OR IS NOT IN THE TREE
	// EXAMPLE USAGE: PICK EGG egg1 FROM firstNest FIND egg1 = 'value'

-----------------------------------------------------------------------------------------------------------MANIPULATING DATA---------------------------------------------------------------------------------------------------------
	
1. LAY EGG INTO nest_name (egg1,egg2) (INSERT INTO)...
	EGGS(newEgg1,newEgg2)
	
	// INSERTS NEW ENTRY/S INTO THE GIVEN NEST (TABLE)
	// THROWS NOACCESSEXCPETION IF ACCESS LEVEL IS TOO LOW OR YOUR ACCESS TO THE EGG/NEST HAS BEEN CHANGED [E.G NOT AN ADMIN]
	// THROWS NULLPOINTEREXCEPTION IF YOU ATTEMPT TO ADD AN EGG INTO A NEST THAT DOES NOT EXIST
	// EXAMPLE USAGE: LAY EGG INTO nest_name (egg1,egg2) EGGS('value1','value2')
	
	
2. UPDATE NEST nest_name
	SET egg1 = value1, egg2 = value2
	[WHILE condition]
	
	//UPDATES A GIVEN NEST WITH ANY ACTION THE USER WOULD NEED [E.g changing the status of a nest to ADMIN_ONLY access] SUPPORTS CONDITIONS
	// THROWS NOACCESSEXCPETION IF ACCESS LEVEL IS TOO LOW OR YOUR ACCESS TO THE EGG/NEST HAS BEEN CHANGED [E.G NOT AN ADMIN]
	// THROWS NULLPOINTEREXCEPTION IF YOU ATTEMPT TO UPDATE AN EGG INTO A NEST THAT DOES NOT EXIST
	// EXAMPLE USAGE: UPDATE NEST nest_name SET egg1 = 'value1', egg2 = 'value2' WHILE status = 'rotten'
	// EXAMPLE USAGE: UPDATE NEST nest_name SET status = 'ADMIN_ONLY'
	
3. REMOVE EGG [STRINGLIT egg_name] FROM NEST [STRINGLIT nest_name]
	[WHILE conditon]
	
	// REMOVES AN EGG FROM A GIVEN NEST WHILST SUPPORTING A GIVEN CONDITIONAL
	// [E.g REMOVE EGG FROM NEST nest5 WHILE status eql 'rotten']
	// THROWS NOACCESSEXCPETION IF ACCESS LEVEL IS TOO LOW OR YOUR ACCESS TO THE EGG/NEST HAS BEEN CHANGED [E.G NOT AN ADMIN]
	// THROWS NULLPOINTEREXCEPTION IF YOU ATTEMPT TO REMOVE AN EGG THAT DOES NOT EXIST
	// EXAMPLE USAGE: REMOVE EGG egg1 FROM NEST nest_name WHILE status = 'rotten'
	// EXAMPLE USAGE: REMOVE EGG egg1 FROM NEST nest_name
	
-------------------------------------------------------------------------------------------------------NEST FUNCTIONALITY & DEFINITIONS----------------------------------------------------------------------------------------------

1. CREATE NEW NEST nest_name {
	column1 datatype CONSTRAINT [limits]
	column2 datatype CONSTRAINT [limits]
	...
	[HOME KEY (nest_name)]
	}
	
	// CREATES A NEW NEST WITH A NAME AS INPUT
	// CREATES EGGS BASED ON NAME, DATATYPE, AND LIMITS SET BY THE USER
	// THROWS FAULTYPERMISSIONSEXCEPTION IF YOU DO NOT HAVE PERMISSION TO CREATE/ALTER NESTS WITHIN YOUR TREE
	// EXAMPLE USAGE: CREATE NEW NEST nest_name { egg1 INTEGER, egg2 STRINGLIT, egg3 MIGRATIONDATE }
	// EXAMPLE USAGE: CREATE NEW NEST nest_name { egg1 INTEGER CONSTRAINT NOT NULL, egg2 STRINGLIT CONSTRAINT UNIQUE }
	

2. CHANGE NEST nest_name
	ADD egg_name datatype [limits
	
	ADDITONAL OPERATIONS:
		DROP EGG egg_name;
		MODIFY EGG egg_name, new_datatype;
		
	// CHANGES A GIVEN NEST'S PROPERTIES:
	// CAN BE USED TO ADD,REMOVE, OR CHANGE DATA-TYPES OF EGGS INSIDE NESTS
	// THROWS NESTUNALTERABLEEXCEPTION IF NEST STATUS = UNATLERABLE
	// THROWS FAULTYPERMISSIONSEXCEPTION IF YOU DO NOT HAVE PERMISSION TO CREATE/ALTER NESTS WITHIN YOUR TREE
	// THROWS NESTNOTFOUNDEXCEPTION IF NEST DOES NOT EXIST
	// EXAMPLE USAGE: CHANGE NEST nest_name ADD egg1 INTEGER CONSTRAINT !NULL
	
	

3. DESTROY NEST [IF EXISTS] nest_name;
	
	// COMPLETELY REMOVES A GIVEN NEST 
	// THROWS NESTNOTFOUNDEXCEPTION IF NEST DOES NOT EXIST 
	// THROWS NESTUNALTERABLEEXCEPTION IF NEST STATUS = UNATLERABLE
	// THROWS FAULTYPERMISSIONSEXCEPTION IF YOU DO NOT HAVE PERMISSION TO CREATE/ALTER NESTS WITHIN YOUR TREE



4. EXPORT NEST nest_name
	[TO destination]
	[FILETYPE file_type_name ]
	[WHILE condition]
	
	// CONVERTS A GIVEN NEST INTO A GIVEN READABLE FILE-TYPE (PDF, WORD, EXCEL, GOOGLE SHEET,ETC)
	// THROWS NOEXPORTEXCEPTION IF YOU DO NOT HAVE PERMISSION TO EXPORT THE NEST
	// THROWS FAULTYPERMISSIONSEXCEPTION IF YOU DO NOT HAVE PERMISSION TO CREATE/ALTER NESTS WITHIN YOUR TREE
	// ADMIN_USER ONLY COMMAND [ACCESS CAN BE GIVEN TO USERS FOR A SET DURATION OF TIME OR THROUGH AN ENCRYPTED KEY
	// [E.G #1 PACKAGE NEST example TO 'C:\Users\example\Downloads\stuff' FILETYPE 	pdf WHILE myStatus = TEMP_ADMIN_ACCESS
	

5. GRAPH NEST nest_name 
	[TYPE graph_type]
	[FILETYPE file_type_name]
	[TO destination]
	[GROUPS group1, group2, ...] 
	
	
	/* READS THROUGH A GIVEN NEST AND GRAPHS BASED ON USER COMMANDS AND NUMERICAL DATA GIVEN. ADDITIONALLY
		GRAPHS BASED ON GROUPS. DIVIDES THE TOTAL NUMBER INTO SECTIONS BASED ON THE NAMES OF EACH GROUP
		USES PICK EGG COMMAND TO SEARCH AND QUERY THROUGH THE NEST TO FIND EGGS THAT ARE ASSIGNED BY THE
		GROUP PARAMETER.
		OUTPUTS SAID GRAPH INTO A FILE BASED ON THE GIVEN FILE-TYPE. [PDF OR ANY PICTURE FORMAT]
	*/
	// [E.G GRAPH NEST graphing_nest TYPE pie FILETYPE jpeg TO 'C:\Users\example\Downloads\Graphs' GROUPS bacon_lovers, chicken_lovers, beef_lovers
	// THROWS NOEXPORTEXCEPTION IF YOU DO NOT HAVE PERMISSION TO EXPORT THE NEST
	// THROWS FAULTYPERMISSIONSEXCEPTION IF YOU DO NOT HAVE PERMISSION TO CREATE/ALTER NESTS WITHIN YOUR TREE
	// THROWS UNGRAPHABLEEXCEPTION IF THE NEST DOES NOT HAVE ANY NUMERICAL DATA, HAS LESS THAN 0 GROUPS, OR IF NEST IS DESIGNATED UNGRAPHABLE
	
	
	

----------------------------------------------------------------------------------------------------------------------INDEXING-------------------------------------------------------------------------------------------------------

1. CREATE NEW INDEX index_name
	ON nest_name (egg1,egg2,...);
	
2. DELETE INDEX index_name ON nest_name;



----------------------------------------------------------------------------------------------------------------------JOINS & AGGREGATIONS-------------------------------------------------------------------------------------------


1. INNER JOIN nest2 ON nest1.egg = nest2.egg;
	PICK EGG eggs
	FROM nest1
	

2. [DIRECTION] JOIN nest2 ON nest1.egg = nest2.egg;

	PICK EGG eggs
	FROM nest1
	
	

---------------------------------------------------------------------------------------------------------------------USERS & PERMISSIONS--------------------------------------------------------------------------------------------


1. HATCH NEW CHICK  [STRINGLIT userName] @'host' [RECOGNITION recognitionType];

	// CREATES A NEW USER FOR THE TREE. SETS THEIR NAME, HOW THEY WILL LOG-IN, AND THEIR PERMISSION LEVEL
	// [E.G CREATE NEW CHICK 'admin'@'host' RECOGNITION 'auth_key'
	

2. DROP CHICK [STRINGLIT userName] [STRINGLIT reason];

	// REMOVES A USER FROM THE TREE. REMOVES ALL ACCESS TO ALL FILES/NESTS WITHIN THE TREE
	// [STRINGLIT reason] is an optional parameter
	
3. GRANT CHICK userName [PERMISSION permission_type] TO [NEST awarded_nest] DURATION [DURATION lengthInSeconds]

	// GRANTS A DESIGNATED USER A PERMISSION OR SET OF PERMISSIONS TO CERTAIN NESTS OR THE WHOLE TREE
	// THIS PERMISSION IS EXTREMELY DANGEROUS AND SHOULD ONLY BE USED BY ADMINISTRATORS.
	// PERMISSIONS CANNOT NORMALLY BE GRANTED PERMANENTLY, DUE TO HOW POWERFUL THIS COMMAND IS. ADMINISTRATORS ONLY CAN SET THE DURATION
	// ADMINISTRATOR ONLY
	
	E.G #1 GRANT CHICK engineer TEMP-ADMIN TO '*' DURATION 259200
	GRANTS THE ENGINEER USER TEMP-ADMIN ACCESS TO ALL NESTS IN THE TREE FOR 3 DAYS

	E.G #2 GRANT CHICK admin_son ADMIN+ TO '*' DURATION '*'
	GRANTS THE ADMIN_SON USER ADMIN+ ACCESS TO ALL NESTS IN THE TREE PERMANENTLY
	//REQUIRES AUTH_KEY AND APPROVAL FROM 3 OTHER ADMIN LEVEL USERS


4. REVOKE PERMISSION [PERMISSION permission_type] FROM [STRINGLIT userName] DURATION [DURATION length]

	// REMOVES PERMISSIONS FROM A USER 
	

5.  CREATE ROLE [STRINGLIT role_name] [INTEGER hierarchy_number]

	// CREATES A ROLE WITHIN THE USER-DATABASE WITH A GIVEN HIERARCHY, 0 BEING THE HIGHEST AND 10 BEING THE LOWEST


6. INIT DEBUG USER [INTEGER timeLength] [STRINGLIT userName] [SRINGLIT tempPassword]
    // GIVES THE CURRENT USER TEMP-ADMIN ACCESS SO THAT THEY MAY CREATE A TREE,NESTS, AND EGGS TO TEST THE LANGUAGE
    // GIVES ADMINISTRATOR LEVEL ACCESS TO THE CURRENT USER
    // EXOURES AFTER 30 MINUTES OR WHEN THE USER LOGS OUT


7. LOGIN USER [STRINGLIT userName]
    // Attempts to allow access to the tree for a given user.
    // Prompts user for their password/authentication key, or their Two-Factor Authentication Code
    // THROWS AUTHKEYEXCEPTION IF THE USERNAME OR AUTHENTICATION KEY IS INCORRECT
    // THROWS TEMPPERMISSIONEXCEPTION IF THE USER IS NOT ALLOWED
    // EXAMPLE USAGE: LOGIN USER 'admin'@'localhost'

8. LOGOUT USER [STRINGLIT userName]
    // Logs out a user from the tree, saves all changes made by the user, and removes their access to the tree.
    // THROWS NOACCESSEXCPETION IF THE USER IS NOT LOGGED IN
    // EXAMPLE USAGE: LOGOUT USER 'admin'@'localhost'

9. ENCRYPT USERS [STRINGLIT encryption_key]
    // Encrypts all user data in the tree with a given encryption key
    // THROWS FAULTYPERMISSIONSEXCEPTION IF THE USER IS NOT AN ADMINISTRATOR
    // THROWS NOACCESSEXCPETION IF THE USER IS NOT LOGGED IN
    // EXAMPLE USAGE: ENCRYPT USERS 'my_secret_key'





---------------------------------------------------------------------------------------------------------------------UTILITY FUNCTIONS--------------------------------------------------------------------------------------------


1. GROUP BY [STRINGLIT egg2] FROM [STRINGLIT NEST] | [ FUNCTION/COMMAND HERE]

	// GROUPS EGGS BY A GIVEN EGG FROM A GIVEN NEST. PERFORMS FUNCTION/COMMAND AFTER GROUPING
	// EXAMPLE USAGE: GROUP BY egg2 FROM nest_name | PICK EGG egg1, egg2 FROM nest_name WHERE egg2 = 'value'
	

2. [DIRECTION] JOIN nest 2 ON nest1.egg = nest2.egg && PICK EGG *

	// PICKS ALL EGGS FROM A GIVEN NEST, THEN JOINS THE 2ND AND FIRST NEST'S EGGS TO FORM A 2ND EGG

3. INIT NEW KEYGEN [STRINGLIT key_name] [STRINGLIT key_description] [STRINGLIT key_owner] [INTEGER max_keys] [STRINGLIT key_password] [STRINGLIT output_path]
    // CREATES A NEW KEYGEN FOR A TREE, ALLOWING USERS TO GENERATE KEYS FOR ACCESSING NESTS AND EGGS
    // THE KEYGEN WILL BE STORED IN THE OUTPUT PATH AS A FILE
    // THROWS DUPLICATENESTEXCEPTION IF A KEYGEN WITH THE SAME NAME ALREADY EXISTS
    // THROWS FAULTYPERMISSIONSEXCEPTION IF THE USER IS NOT AN ADMINISTRATOR
    // THROWS NOACCESSEXCEPTION IF THE USER IS NOT LOGGED IN
    // EXAMPLE USAGE: INIT NEW KEYGEN 'key_name' 'This is a test keygen' 'HMythical' 100 'key_password' 'C:\Users\HMythical\Documents\BirdNestTrees\key_name.key'


-----------------------------------------------------------------------------------------------------------------DATA FUNCTIONS AND COMMANDS----------------------------------------------------------------------------------------------------------
	1. INIT NEW TREE 'tree_name' [STRINGLIT tree_description] [STRINGLIT tree_owner] [INTEGER max_nests] [INTEGER max_eggs_per_nest] [INTEGER max_users] [STRINGLIT tree_password] [STRINGLIT output_path]
	// CREATES A NEW TREE WITH A NAME, DESCRIPTION, OWNER, MAXIMUM NESTS, MAXIMUM EGGS PER NEST, MAXIMUM USERS, AND A PASSWORD FOR THE TREE
	// WHEN THE TREE OWNER LOGS OUT, THEY WILL BE PROMPTED TO SET A PASSWORD. THE ENCRYPTION KEY FOR THE TREE WILL BE STORED IN A FILE AT THE GIVEN OUTPUT PATH
	// USERS CANNOT EDIT THE TREE OR ITS CONTENTS UNLESS UNLOCKED BY THE TREE OWNER OR AN ADMINISTRATOR
	// THROWS DUPLICATENESTEXCEPTION IF A TREE WITH THE SAME NAME ALREADY EXISTS
	// THROWS FAULTYPERMISSIONSEXCEPTION IF THE USER IS NOT AN ADMINISTRATOR
	// THROWS NOACCESSEXCEPTION IF THE USER IS NOT LOGGED IN
	// EXAMPLE USAGE: INIT NEW TREE 'tree_name' 'This is a test tree' 'HMythical' 10 100 1000 'tree_password' 'C:\Users\HMythical\Documents\BirdNestTrees\tree_name.key'

	2. LOCK TREE [STRINGLIT tree_name] [STRINGLIT reason] [INTEGER duration] [STRINGLIT admin_password]

	// PREVENTS ALL USERS, INCLUDING ADMINISTRATORS, FROM ACCESSING, MODIFYING, DELETING, OR EXPORTING TREES OR THE CONTENTS INSIDE OF A TREE FOR A GIVEN DURATION
	// ACCESS IS RESTORED AFTER THE DURATION ENDS OR THE TREE OWNER UNLOCKS THE TREE
	// THROWS FAULTYPERMISSIONSEXCEPTION IF THE USER IS NOT AN ADMINISTRATOR OR THE TREE OWNER
	// THROWS NOACCESSEXCEPTION IF THE USER IS NOT LOGGED IN
	// EXAMPLE USAGE: LOCK TREE 'tree_name' 'reason' 3600

	3. UNLOCK TREE [STRINGLIT tree_name] [STRINGLIT admin_password]
	// UNLOCKS A LOCKED TREE, ALLOWING USERS TO ACCESS, MODIFY, DELETE, OR EXPORT TREES OR THE CONTENTS INSIDE OF A TREE
	// THROWS FAULTYPERMISSIONSEXCEPTION IF THE USER IS NOT AN ADMINISTRATOR OR THE TREE OWNER
    // THROWS NOACCESSEXCEPTION IF THE USER IS NOT LOGGED IN
    // EXAMPLE USAGE: UNLOCK TREE 'tree_name' 'admin_password'

    4. EXPORT TREE [STRINGLIT tree_name] TO [STRINGLIT output_path] [FILETYPE file_type_name]
    // CONVERTS THE CONTENTS OF A GIVEN TREE INTO A READABLE/EDITABLE FILE-TYPE (PDF, WORD, GOOGLE DOC EXCEL ONLY)
    // FILETYPE: Parameters must be only of the following types: pdf,wrd,excl,gdoc,gsheet
    // THROWS NOEXPORTEXCEPTION IF YOU DO NOT HAVE PERMISSION TO EXPORT THE TREE
    // THROWS FAULTYFILETYPEEXCEPTION IF THE FILETYPE IS NOT SUPPORTED
    // EXAMPLE USAGE: EXPORT TREE 'tree_name' TO 'C:\Users\HMythical\Documents\BirdNestTrees\tree_name.pdf' FILETYPE pdf


    5. IMPORT TREE [STRINGLIT tree_name] FROM [STRINGLIT input_path] [FILETYPE file_type_name]
    // DECOMPILES A TREE FROM A READABLE/EDITABLE FILE=TYPE (PDF, WORD, GOOGLE DOC EXCEL ONLY)
    // FILETYPE: Parameters must be only of the following types: pdf,wrd,excl,gdoc,gsheet
    // THROWS NOEXPORTEXCEPTION IF YOU DO NOT HAVE PERMISSION TO IMPORT THE TREE
    // THROWS FAULTYFILETYPEEXCEPTION IF THE FILETYPE IS NOT SUPPORTED
    // EXAMPLE USAGE: IMPORT TREE 'tree_name' FROM 'C:\Users\HMythical\Documents\BirdNestTrees\tree_name.pdf' FILETYPE pdf

    6. DELETE TREE [STRINGLIT tree_name] [STRINGLIT reason]
    // COMPLETELY REMOVES A GIVEN TREE FROM THE SYSTEM
    // THROWS NOACCESSEXCPETION IF THE USER IS NOT LOGGED IN
    // THROWS FAULTYPERMISSIONSEXCEPTION IF THE USER IS NOT AN ADMINISTRATOR OR THE TREE OWNER
    // EXAMPLE USAGE: DELETE TREE 'tree_name' 'reason for deletion'

    7. ENCRYPT TREE [STRINGLIT tree_name] [STRINGLIT encryption_key]
    // ENCRYPTS ALL DATA IN A TREE WITH A GIVEN ENCRYPTION KEY
    // THROWS FAULTYPERMISSIONSEXCEPTION IF THE USER IS NOT AN ADMINISTRATOR OR THE TREE OWNER
    // THROWS NOACCESSEXCPETION IF THE USER IS NOT LOGGED IN
    // EXAMPLE USAGE: ENCRYPT TREE 'tree_name' 'my_secret_key'

    8. DECRYPT TREE [STRINGLIT tree_name] [STRINGLIT encryption_key]
    // DECRYPTS ALL DATA IN A TREE WITH A GIVEN ENCRYPTION KEY
    // THROWS FAULTYPERMISSIONSEXCEPTION IF THE USER IS NOT AN ADMINISTRATOR OR THE TREE OWNER
    // THROWS NOACCESSEXCPETION IF THE USER IS NOT LOGGED IN
    // EXAMPLE USAGE: DECRYPT TREE 'tree_name' 'my_secret_key'







----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SECTION II: KEYWORDS

THESE SELECTIONS OF KEYWORDS ARE MEANT TO BE PUNS ON AVIAN BASED TERMINOLOGY. 
ON THE LEFT SIDE, ARE THE NAMES I CAME UP WITH, THE RIGHT SIDE IS THE SQL EQUIVALENT
THIS LIST IS NOT COMPLETE, NOR WILL IT EVER BE, FEEDBACK AND SUGGESTIONS ARE HIGHLY APPRECIATED

1. DATATYPES & CONSTRAINTS
INTEGER - NON-FLOATING-POINT NUMBERS
VARICHAR - SINGULAR CHARACTERS
STRINGLIT - ARRAYS OF VARICHARS
MIGRATIONDATE - DATES
FLIGHTMODE - BOOLEANS
ROOSTKEY - PRIMARY KEY
FLOCKKEY - FOREIGN KEY
SOLITARY - UNIQUE
!NULL - NOT NULL

2. QUERY OPERATIONS
PECK EGG - SELECT
BRANCH - FROM
PERCH - WHERE
FLOCK - GROUP BY
ARRANGE - ORDER BY
LIMIT 

3. JOINS & AGGREGATIONS
FLOCKWITH - JOIN
NESTFLOCK - INNER JOIN
WINGFLOCK - LEFT JOIN
TALONFLOCK - RIGHT JOIN
COUNTFEATHER - COUNT
SWARM  - SUM
AVIANAVG - AVG

4. DATA MANIPULATION
LAY - INSERT
SHED - UPDATE
DROP - DELETE
CLUTCH - VALUES

5. TRANSACTIONS & PERMISSIONS & USERS
TAKEOFF - COMMIT
GLIDE - ROLLBACK
HATCH - GRANT
PLUCK PERMISSION - REVOKE

6. UTILITY FUNCTIONS [CUSTOM & BASE FUNCTIONS]

SING - EXPORT
INSPECT NEST - DESCRIBE

7. Flags & Command Integration

Global Flags:
-m, --migrate        Migration mode: Allows eggs and nests to be transferred between trees
-q, --quiet         Silent mode: Suppresses all output except errors (quiet as a sleeping bird)
-v, --verbose       Verbose mode: Shows detailed output of all operations (chatty as a morning bird)
-r, --recursive     Recursive mode: Applies commands to all sub-nests recursively
-f, --force         Force mode: Overwrites existing eggs/nests without confirmation
-s, --safe          Safe mode: Additional validation checks before operations
-w, --watch         Watch mode: Monitors changes in nests (like a watchful bird)
-d, --debug         Debug mode: Shows detailed error messages and stack traces
-t, --temporary     Creates temporary nests that expire after session ends
-p, --preserve      Preserves egg metadata during operations

Command-Specific Flags:
--no-cache          Disables caching of frequently accessed eggs
--dry-run           Shows what would happen without making actual changes
--perch-timeout=N   Sets the maximum time (in seconds) for operations to complete
--batch-size=N      Number of eggs to process at once in batch operations
--incubate=N        Delay between operations in milliseconds
--nest-lock         Locks nest during operation
--feather-format    Pretty prints the output (formatted display)
--migrate-eggs      Only migrate egg data, not structure
--quick-fly         Skip validation checks for faster execution
--nest-backup       Create backup before operation
--egg-shell         Add protection layer to sensitive egg data

Command Integration Examples:

1. PICK EGG Command:
PICK EGG [SPECIFIC] egg1,egg2,... [FLAGS] FROM nest_name
    Supported flags:
    --feather-format     Format output in a pretty table
    --quick-fly         Skip validation for faster queries
    --no-cache          Force fresh read from nest

    Example: PICK EGG * --feather-format --no-cache FROM users_nest

2. LAY EGG Command:
LAY EGG INTO nest_name [FLAGS] (egg1,egg2)
    Supported flags:
    -f, --force         Override existing eggs
    --nest-lock         Lock nest during insertion
    --egg-shell         Encrypt sensitive data

    Example: LAY EGG INTO sensitive_nest --egg-shell (username,password)

3. EXPORT NEST Command:
EXPORT NEST nest_name [FLAGS]
    Supported flags:
    -r, --recursive     Include all sub-nests
    --nest-backup       Create backup before export
    -p, --preserve      Keep metadata intact

    Example: EXPORT NEST user_data -r --nest-backup

4. HATCH NEW CHICK Command:
HATCH NEW CHICK username@host [FLAGS] RECOGNITION auth_type
    Supported flags:
    --temporary         Create temporary user
    --incubate=1000    Add delay for security
    -s, --safe         Extra security checks

    Example: HATCH NEW CHICK 'admin'@'localhost' --safe RECOGNITION '2FA'

5. UPDATE NEST Command:
UPDATE NEST nest_name [FLAGS] SET egg1 = value1
    Supported flags:
    --batch-size=100    Update eggs in batches
    --dry-run          Preview changes
    -w, --watch        Monitor update progress

    Example: UPDATE NEST large_nest --batch-size=500 --watch SET status = 'active'

Examples of Complex Flag Usage:
1. PICK EGG username,email FROM users_nest --feather-format --egg-shell WHERE sensitive = true
2. LAY EGG INTO audit_nest -f --nest-lock --incubate=500 (timestamp, action, user)
3. EXPORT NEST financial_data -r -p --nest-backup --egg-shell TO '/secure/backup'

ERRORS/EXCEPTIONS:

EGGBURSTEXCEPTION
UNGRAPHABLEEXCEPTION
TEMPPERMISSIONEXCEPTION
DUPLICATENESTEXCEPTION
NOEXPORTEXCEPTION
FILETYPEEXCEPTION
BROKENWINGEXCEPTION
EMPTYFLOCKEXCEPTION
AUTHKEYEXCEPTION
ADMINAPPROVALEXCEPTION
NESTUNALTERABLEEXCEPTION
FAULTYPERMISSIONSEXCEPTION
NULLPOINTEREXCEPTION
NOACCESSEXCPETION
EGGNOTFOUNDEXCEPTION
NESTNOTFOUNDEXCEPTION
